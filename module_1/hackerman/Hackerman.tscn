[gd_scene load_steps=7 format=2]

[ext_resource path="res://global/generic_interactive/GenericInteractive.tscn" type="PackedScene" id=1]
[ext_resource path="res://module_1/hackerman/characters.png" type="Texture" id=2]

[sub_resource type="Shader" id=1]
code = "// From Godot Shaders: https://godotshaders.com/shader/matrix-rain/

shader_type canvas_item;

uniform sampler2D chars;
uniform sampler2D noise_tex; 

void fragment() {
	// Random character
	vec2 uv = fract(UV * 256.0); // loop uv 32 times for the characters (as the noise resolution is 32x32)
	float noise = texture(noise_tex, UV).g;
	noise = round(noise * 10.0) / 10.0; // make sure the color value are snapped by 0.1 (so its only 0.0, 0.1, 0.2, and so on) for perfect offset
	uv.x = (uv.x / 10.0) - 0.005; // offset
	uv.x += noise; // offset every character by the noise value
	uv.x += round(TIME * 0.01 * 10.0)/10.0; // animate characters with TIME, then snapped by 0.1 so it doesnt slide. 0.5 is the speed, you might want to change that
	
	// distortion
	float rain = UV.y; // this is a vertical gradient
	float distortion = texture(noise_tex, UV / vec2(1.0, 128.0)).g; // this will be used for distortion, using previous noise but only horizontal
	distortion = round(distortion * 10.0) / 10.0; // for precision reason, you need to round your distortion too, otherwise some character wouldnt be fully shown
	rain -= round(TIME * 0.1 * 256.0) / 256.0; // the 'rain' shouldn't move smoothly right? also, 0.2 is the speed
	rain += distortion; // distort this gradient, turning it into a rain
	rain = fract(rain); // loop the rain
	rain = round(rain * 128.0) / 128.0; // pixelate the rain. Rounding by 32.0 or 8.0 is optional
	rain = pow(rain, 3.0); // this is not necessary, i just think that it looks good
	rain *= 0.5; // this is also not important, just making the characters brighter
	
	COLOR.rgb = texture(chars, uv).rgb * rain * vec3(0.0, 1.0, 0.0); // finally multiply them together then multiply with green for the color
}"

[sub_resource type="OpenSimplexNoise" id=3]
seed = 887
octaves = 2
period = 0.1
persistence = 0.0

[sub_resource type="NoiseTexture" id=4]
width = 256
height = 256
noise = SubResource( 3 )

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/chars = ExtResource( 2 )
shader_param/noise_tex = SubResource( 4 )

[node name="Hackerman" instance=ExtResource( 1 )]

[node name="Game" type="Control" parent="." index="2"]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Background" type="ColorRect" parent="Game" index="0"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0.0390625, 0.0390625, 0.0390625, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HBoxContainer" type="HBoxContainer" parent="Game" index="1"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 20.0
margin_top = 20.0
margin_right = -20.0
margin_bottom = -20.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="SequenceContainer" type="CenterContainer" parent="Game/HBoxContainer" index="0"]
margin_bottom = 1040.0

[node name="TerminalContainer" type="VBoxContainer" parent="Game/HBoxContainer" index="1"]
margin_left = 4.0
margin_right = 4.0
margin_bottom = 1040.0
